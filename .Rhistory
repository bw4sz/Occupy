```
Reformat index for jags.
Jags needs a vector of input species 1:n with no breaks.
```{r}
#Easiest to work with jags as numeric ordinal values
indat$Hummingbird<-as.factor(indat$Hummingbird)
indat$Iplant_Double<-as.factor(indat$Iplant_Double)
indat$jBird<-as.numeric(indat$Hummingbird)
indat$jPlant<-as.numeric(indat$Iplant_Double)
jagsIndexBird<-data.frame(Hummingbird=levels(indat$Hummingbird),jBird=1:length(levels(indat$Hummingbird)))
jagsIndexPlants<-data.frame(Iplant_Double=levels(indat$Iplant_Double),jPlant=1:length(levels(indat$Iplant_Double)))
#Similiarly, the trait matrix needs to reflect this indexing.
jTraitmatch<-traitmatchT[rownames(traitmatchT) %in% unique(indat$Hummingbird),colnames(traitmatchT) %in% unique(indat$Iplant_Double)]
```
```{r}
indat<-droplevels(indat)
#Turn Time and ID into numeric indexes
indat$jTime<-as.numeric(as.factor(indat$Time))
indat$jID<-as.numeric(as.factor(indat$ID))
#index resources
indat$scaledR<-(indat$FlowerA>0)*1
resourcemat<-indat %>% group_by(jBird,jPlant,jID) %>% summarize(v=scale(FlowerA))  %>% acast(jBird ~ jPlant ~ jID,value.var='v',fill=0)
```
resourcemat<-indat %>% group_by(jBird,jPlant,jID) %>% summarize(v=scale(max(FlowerA)))  %>% acast(jBird ~ jPlant ~ jID,value.var='v',fill=0)
resourcemat
1/sqrt(0.001)
1/sqrt(0.0001)
1/sqrt(5)
1/sqrt(2)
1/sqrt(4)
?raster
library(raster)
raster(nrow=10,ncol=10,data=rnorm(100))
raster(nrow=10,ncol=10,values=rnorm(100))
r[]<-rnorm(100)
r<-raster(nrow=10,ncol=10)
r[]<-rnorm(100)
plot(r)
l<-SpatialPoints(rbind(pt1,pt2))
pt1<-c(-150,0)
pt2<-c(150,0)
l<-SpatialPoints(rbind(pt1,pt2))
lines(l,col='red')
l
l<-SpatialLines(rbind(pt1,pt2))
?SpatialLines
l<-SpatialLines(Lines(pt1,pt2))
l<-SpatialPoints(c(pt1,pt2))
l<-SpatialPoints(cbind(pt1,pt2))
l
plot(l)
coords(l)
coordinates(l)
pt1<-c(0,-150)
pt2<-c(0,150)
l<-SpatialPoints(cbind(pt1,pt2))
lines(l,col='red')
library(raster)
r<-raster(nrow=10,ncol=10)
r[]<-rnorm(100)
plot(r)
#straight line through the center
pt1<-c(0,-150)
pt2<-c(0,150)
l<-SpatialPoints(cbind(pt1,pt2))
plot(l,add=T)
l<-SpatialPoints(rbind(pt1,pt2))
plot(l,add=T)
pt1<-c(150,0)
pt2<-c(150,0)
l<-SpatialPoints(rbind(pt1,pt2))
plot(l,add=T)
#Angle to Nearest Point
library(raster)
r<-raster(nrow=10,ncol=10)
r[]<-rnorm(100)
plot(r)
#straight line through the center
pt1<-c(150,0)
pt2<-c(150,0)
l<-SpatialPoints(rbind(pt1,pt2))
plot(l,add=T)
#straight line through the center
pt1<-c(150,0)
pt2<-c(-150,0)
l<-SpatialPoints(rbind(pt1,pt2))
plot(l,add=T)
library(geosphere)
?horizon
pointDistance(r,l)
pointDistance(l,r)
pointDistance(l,r,lonlat = T)
?distance
distanceFromPoints(l,r,lonlat = T)
distanceFromPoints(xy=l,object=r,lonlat = T)
d<-distanceFromPoints(xy=l,object=r,lonlat = T)
plot(d)
earth.bear
libary(fossil)
library(fossil)
install.packages("fossil")
library(fossil)
?earth.bear
?calc
earth.bear(l)
earth.bear(l@coords,l@coords)
l@coords
as.nuemric(l@coords)
as.numeric(l@coords)
earth.bear(pt1,pt2)
earth.bear(pt1[1],pt1[1],pt2[2],pt2[2])
source('~/.active-rstudio-document', echo=TRUE)
warnings()
castdf<-dcast(parsObs[parsObs$par %in% c("beta1","alpha"),], species +Chain +Model+ Draw~par,value.var="estimate")
head(castdf)
castdf$species<-factor(castdf$species,levels=1:max(as.numeric(castdf$species)))
head(castdf)
species.split<-split(castdf,list(castdf$species,castdf$Model))
species.split<-split(castdf,list(castdf$species,castdf$Model),drop=T)
castdf<-dcast(parsObs[parsObs$par %in% c("beta1","alpha"),], species +Chain +Model+ Draw~par,value.var="estimate")
#Turn to species level
castdf$species<-factor(castdf$species,levels=1:max(as.numeric(castdf$species)))
species.split<-split(castdf,list(castdf$species,castdf$Model),drop=T)
species.traj<-list()
for(d in 1:length(species.split)){
x<-species.split[[d]]
#species name
index<-jagsIndexBird[unique(x$species),"Hummingbird"]
#range of trait distances
tsp<-indat %>% filter(Hummingbird==index) %>% .$Traitmatch
#Range of abundances
fsp<-indat %>% filter(Hummingbird==index) %>% .$scaledR
species.traj[[d]]<-trajF(alpha=x$alpha,beta1=x$beta1,trait=tsp,resources=fsp)
}
names(species.traj)<-names(species.split)
species.traj<-melt(species.traj,id.var=colnames(species.traj[[1]]))
#split out names and model
species.traj[,c("Index","Model")]<-colsplit(species.traj$L1,"\\.",c("Index","Model"))
spe<-merge(species.traj,jagsIndexBird,by.x="Index",by.y="jBird")
#match colnames
#plot and compare to original data
ggplot(data=spe[,],aes(x=trait)) + geom_point(data=indat,aes(x=Traitmatch,y=Yobs)) + geom_ribbon(aes(ymin=lower,ymax=upper,fill=Model),alpha=0.6)  + geom_line(aes(y=mean,col=Model),size=1) + theme_bw() + ylab("Interactions") + xlab("Difference between Bill and Corolla Length") + facet_wrap(~Hummingbird,scales="free",ncol=4)+ labs(fill="Model")  + ylab("Interactions per day") + scale_color_manual(values=c("grey70","black")) + scale_fill_manual(values=c("grey70","black"))
ggsave("Figures/SpeciesPredictionsBoth.jpg",dpi=300,height=10,width=10)
d
x<-species.split[[d]]
#species name
index<-jagsIndexBird[unique(x$species),"Hummingbird"]
index
tsp<-indat %>% filter(Hummingbird==index) %>% .$Traitmatch
index
head(indat)
tsp<-indat %>% filter(Hummingbird==index) %>% .$Traitmatch
head(indat[,!colnames(indat) %in% "scaledR"])
head(indat[,!colnames(indat) %in% "scaledR"] %>% filter(Hummingbird==index))
scale(indat$FlowerA)
as.numeric(scale(indat$FlowerA))
source('~/.active-rstudio-document', echo=TRUE)
jagsIndexBird
1/sqrt(5)
1/sqrt(4)
1/sqrt(10)
library(boot)
hist(rnorm(1e5,rnorm(1e5,0,1.67),runif(0,100)))
hist(rnorm(1e5,rnorm(1e5,0,1.67),runif(1e5,0,100)))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),runif(1e5,0,100))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),runif(1e5,0,10))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),runif(1e5,0,5))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),runif(1e5,0,2))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),runif(1e5,0,1))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),rgamma(1e5,0.0001,0.001))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),1/sqrt(runif(1e5,0,10)))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),1/sqrt(runif(1e5,0,100)))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),1/sqrt(runif(1e5,0,1000)))))
resourcemat
table(int$Hummingbird)
load("Observed.Rdata")
table(int$Hummingbird)
hist(rnorm(1e5,0,1/sqrt(0.001)))
hist(rnorm(1e5,0,1/sqrt(0.01)))
hist(rnorm(1e5,0,1/sqrt(0.1)))
hist(rnorm(1e5,0,1/sqrt(0.1)))
sqrt(1/10)
sqrt(1/10)
1/sqrt(10)
1/sqrt(1)
1/sqrt(100)
1/sqrt(100)
sqrt(1/1000)
sqrt(1/100)
sqrt(1/5)
1/sqrt(5)
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),1/sqrt(runif(1e5,0,100)))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),runif(1e5,0,1/sqrt(100))))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),runif(1e5,0,1/sqrt(100)))))
hist(inv.logit(rnorm(1e5,rnorm(1e5,0,1.67),runif(1e5,0,sqrt(1/100)))))
load("Observed.Rdata")
library(reshape2)
library(chron)
library(ggplot2)
library(knitr)
library(R2jags)
library(dplyr)
library(stringr)
library(gridExtra)
library(boot)
library(bipartite)
opts_chunk$set(message=FALSE,warning=FALSE,fig.width=10,fig.height=7,echo=TRUE,cache=F,fig.align='center',fig.path="figureObserved/")
source("Bayesian/BayesFunctions.R")
dmat<-pars_detect_traits %>% filter(par=="E",Model=="N-mixture") %>% group_by(species,plant,parameter) %>% summarize(E=mean(estimate))
Emat<-data.frame(indat,E=dmat$E)
indat
dmat
source('~/.active-rstudio-document', echo=TRUE)
smat<-pars_detect %>% filter(par=="E") %>% group_by(species) %>% summarize(fit=sum(estimate)) %>% arrange(desc(fit))
smat<-pars_detect_traits %>% filter(par=="E") %>% group_by(species) %>% summarize(fit=sum(estimate)) %>% arrange(desc(fit))
smat<-merge(smat,jagsIndexBird,by.x="species",by.y="jBird")
head(smat)
ggplot(smat,aex(x=Hummingbird,y=fit)) + geom_violin()
ggplot(smat,aes(x=Hummingbird,y=fit)) + geom_violin()
smat<-pars_detect_traits %>% filter(par=="E")
smat<-merge(smat,jagsIndexBird,by.x="species",by.y="jBird")
ggplot(smat,aes(x=Hummingbird,y=fit)) + geom_violin()
head(smat)
smat<-pars_detect_traits %>% filter(par=="E")
smat<-merge(smat,jagsIndexBird,by.x="species",by.y="jBird")
head(smat)
smat<-pars_detect_traits %>% filter(par=="E")
ggplot(smat,aes(x=Hummingbird,y=fit)) + geom_violin()
ggplot(smat,aes(x=Hummingbird,y=estimate)) + geom_violin()
par_at<-list(Abundance=pars_abundance,trait=pars_detect_traits)
par_at<0melt(par_at,id.vars=colnames(pars_abundance))
par_at<-list(Abundance=pars_abundance %>% filter(par=="E")],trait=pars_detect_traits %>% filter(par=="E"))
par_at<-list(Abundance=pars_abundance %>% filter(par=="E"),trait=pars_detect_traits %>% filter(par=="E"))
par_at<-melt(par_at,id.vars=colnames(pars_abundance))
head(par_at)
par_at<-list(Abundance=pars_abundance %>% filter(par=="E"),trait=pars_detect_traits %>% filter(par=="E"))
par_at<-melt(par_at,id.vars=colnames(pars_abundance))
dmat<-par_at %>% group_by(species,L1) %>% summarize(E=mean(estimate))
head(dmat)
par_at<-list(Abundance=pars_abundance %>% filter(par=="E"),trait=pars_detect_traits %>% filter(par=="E"))
par_at<-melt(par_at,id.vars=colnames(pars_abundance))
dmat<-par_at %>% group_by(species,L1) %>% summarize(E=mean(estimate))
dmat<-merge(dmat,jagsIndexBird,by.x="species",by.y="jBird")
haed(dmat)
head(dmat)
ggplot(dmat,aes(x=Hummingbird,y=E,col=Hummingbird)) + geom_point()
ggplot(dmat,aes(x=Hummingbird,y=E,col=L1)) + geom_point()
ggplot(dmat,aes(x=Hummingbird,y=E,col=L1)) + geom_point(size=4)
par_at<-list(Abundance=pars_abundance %>% filter(par=="E"),trait=pars_detect_traits %>% filter(par=="E"))
par_at<-melt(par_at,id.vars=colnames(pars_abundance))
dmat<-par_at %>% group_by(plant,L1) %>% summarize(E=mean(estimate))
dmat<-merge(dmat,jagsIndexPlants,by.x="species",by.y="jBird")
par_at<-list(Abundance=pars_abundance %>% filter(par=="E"),trait=pars_detect_traits %>% filter(par=="E"))
par_at<-melt(par_at,id.vars=colnames(pars_abundance))
dmat<-par_at %>% group_by(plant,L1) %>% summarize(E=mean(estimate))
dmat<-merge(dmat,jagsIndexPlants,by.x="species",by.y="jBird")
dmat<-merge(dmat,jagsIndexPlants,by.x="species",by.y="jPlant")
dmat<-merge(dmat,jagsIndexPlants,by.x="plant",by.y="jPlant")
ggplot(dmat,aes(x=Hummingbird,y=E,col=L1)) + geom_point(size=4)
ggplot(dmat,aes(x=Iplant_Double,y=E,col=L1)) + geom_point(size=4)
ggplot(dmat,aes(x=Iplant_Double,y=E,col=L1)) + geom_point(size=4) + coord_flip()
dmat<-par_at %>% group_by(species,plant,L1) %>% summarize(E=mean(estimate))
dmat<-merge(dmat,jagsIndexPlants,by.x="plant",by.y="jPlant")
dmat<-merge(dmat,jagsIndexBird,by.x="species",by.y="jBird")
ggplot(dmat,aes(x=Iplant_Double,y=E,col=L1)) + geom_point(size=4) + coord_flip()
dmat<-par_at %>% group_by(plant,L1) %>% summarize(E=mean(estimate))
dmat<-merge(dmat,jagsIndexPlants,by.x="plant",by.y="jPlant")
ggplot(dmat,aes(x=Iplant_Double,y=E,col=L1)) + geom_point(size=4) + coord_flip()
dmat<-par_at %>% group_by(species,plant,L1) %>% summarize(E=mean(estimate))
dmat<-merge(dmat,jagsIndexPlants,by.x="plant",by.y="jPlant")
dmat<-merge(dmat,jagsIndexBird,by.x="species",by.y="jBird")
head(dmat)
ggplot(dmat,aes(x=Iplant_Double,y=Hummingbird,fill=E)) + geom_tile(size=4) + coord_flip()
ggplot(dmat,aes(x=Iplant_Double,y=Hummingbird,fill=E)) + geom_tile(size=4) + scale_fill_continuous(low='blue',high='red')
ggplot(dmat,aes(x=Iplant_Double,y=Hummingbird,fill=E)) + geom_tile(size=4) + scale_fill_continuous("Discrepancy",low='blue',high='red') + facet_wrap(~L1)
ggplot(dmat,aes(x=Iplant_Double,y=Hummingbird,fill=E)) + geom_tile(size=4) + scale_fill_continuous("Discrepancy",low='blue',high='red') + facet_wrap(~L1,nrow=2)
ggplot(dmat,aes(x=Iplant_Double,y=Hummingbird,fill=E)) + geom_tile(size=4) + scale_fill_continuous("Discrepancy",low='blue',high='red') + facet_wrap(~L1,nrow=2) + theme_bw()
head(dmat,10)
head(dmat %>% arrange(E,L1),10)
head(dmat %>% arrange(desc(E),L1),10)
head(dmat %>% arrange(desc(E),L1),20)
print("Worst 20")
head(par_at)
par_at<-list(Abundance=pars_abundance %>% filter(par %in% c("E","ynew")),trait=pars_detect_traits %>% filter(par %in% c("E","ynew")))
head(par_at)
par_at<-list(Abundance=pars_abundance %>% filter(par %in% c("E","ynew")),trait=pars_detect_traits %>% filter(par %in% c("E","ynew")))
head(par_at)
par_at<-melt(par_at,id.vars=colnames(pars_abundance))
head(par_at)
head(dcast(...~par))
head(dcast(par_at,...~par))
dmat<-par_at %>% group_by(species,plant,L1) %>% summarize(E=mean(estimate))
head(dmat)
par_at<-list(Abundance=pars_abundance %>% filter(par=="E"),trait=pars_detect_traits %>% filter(par=="E"))
head(par_at)
head(par_at)
head(par_at)
x<-pars_detect_traits
Bird="Bird"
Plant="Plant"
ynew=T
parsO<-melt(x$BUGSoutput$sims.array)
colnames(parsO)<-c("Draw","Chain","parameter","estimate")
data=obs
data=indat
parsO<-melt(x$BUGSoutput$sims.array)
colnames(parsO)<-c("Draw","Chain","parameter","estimate")
parsO<-melt(x$BUGSoutput$sims.array)
traits
abundance
system.time(abundance<-jags.parallel(Dat,InitStage,parameters.to.save=ParsStage,model.file="Bayesian/NmixturePoissonRagged_Abundance.jags",n.thin=nt, n.iter=ni,n.burnin=nb,n.chains=nc))
runs<-100
#Source model
source("Bayesian/NmixturePoissonRagged_Abundance.R")
#print model
print.noquote(readLines("Bayesian//NmixturePoissonRagged_Abundance.R"))
#for parallel run
Yobs=indat$Yobs
Bird=indat$jBird
Plant=indat$jPlant
Time=indat$jID
Times=max(indat$jID)
Traitmatch=jTraitmatch
Birds=max(indat$jBird)
Plants=max(indat$jPlant)
Nobs=length(indat$Yobs)
resources=resourcemat
#A blank Y matrix - all present
Ninit<-array(dim=c(Birds,Plants,Times),data=max(indat$Yobs)+1)
#Inits
InitStage <- function() {list(beta1=rep(0,Birds),alpha=rep(0,Birds),alpha_mu=0,N=Ninit,beta1_mu=0)}
#Parameters to track
ParsStage <- c("detect","alpha","beta1","alpha_mu","beta1_mu","fit","fitnew","ynew","E")
#MCMC options
ni <- runs  # number of draws from the posterior
nt <- 16   #thinning rate
nb <- max(0,runs-4000) # number to discard for burn-in
nc <- 2  # number of chains
Dat<-list("Yobs","Bird","Plant","Plants","Traitmatch","Birds","Nobs","Ninit","Time","Times","resources","nc","nb","ni","nt")
system.time(abundance<-jags.parallel(Dat,InitStage,parameters.to.save=ParsStage,model.file="Bayesian/NmixturePoissonRagged_Abundance.jags",n.thin=nt, n.iter=ni,n.burnin=nb,n.chains=nc))
abundance
parsO<-melt(x$BUGSoutput$sims.array)
x=abundance
data=indat
Bird="Bird"
Bird="Bird"
Plant="Plant"
ynew=T
parsO<-melt(x$BUGSoutput$sims.array)
colnames(parsO)<-c("Draw","Chain","parameter","estimate")
#label species and plants
l<-levels(parsO$parameter)
#parameters to save
totrack<-x$parameters.to.save
#assign species index to ragged frame.
sp_pl<-data.frame(parameter=l,species=as.numeric(str_match(l,pattern="\\[(\\d+)]")[,2]),par=str_extract(l,"\\w+"))
i<-sp_pl$par %in% c("ynew","E")
#Species
sp_pl[i,][,"species"]<-data[as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2]),Bird]
sp_pl[i,]
sp_pl[i,][,"species"]<-data[as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2]),Bird]
#Plant
#add a NA plant columns
sp_pl$plant<-NA
sp_pl[i,][,"plant"]<-data[as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2]),Plant]
sp_pl
sp_pl<-data.frame(parameter=l,species=as.numeric(str_match(l,pattern="\\[(\\d+)]")[,2]),par=str_extract(l,"\\w+"))
i<-sp_pl$par %in% c("ynew","E")
#Species
sp_pl[i,][,"species"]<-data[as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2]),Bird]
#Plant
#add a NA plant columns
sp_pl$plant<-NA
sp_pl[i,][,"plant"]<-data[as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2]),Plant]
sp_pl
head(sp_pl)
str_match(sp_pl[i,]
sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2])
sp_pl[i,][,"parameter"]
str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2])
str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2]
sp_pl
sp_pl[i,][,"index"]<-as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2])
extract_par<-function(x,data=indat,Bird="Bird",Plant="Plant",ynew=T){
#extract desired info from the models
parsO<-melt(x$BUGSoutput$sims.array)
colnames(parsO)<-c("Draw","Chain","parameter","estimate")
#label species and plants
l<-levels(parsO$parameter)
#parameters to save
totrack<-x$parameters.to.save
#assign species index to ragged frame.
sp_pl<-data.frame(parameter=l,species=as.numeric(str_match(l,pattern="\\[(\\d+)]")[,2]),par=str_extract(l,"\\w+"))
#correct N samples
if(ynew){
i<-sp_pl$par %in% c("ynew","E")
#Species
sp_pl[i,][,"species"]<-data[as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2]),Bird]
#Plant
#add a NA plant columns
sp_pl$plant<-NA
sp_pl[i,][,"plant"]<-data[as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2]),Plant]
sp_pl$index<-NA
sp_pl[i,][,"index"]<-as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2])
}
source('~/Occupy/Bayesian/BayesFunctions.R', echo=TRUE)
runs<-100
#Source model
source("Bayesian/NmixturePoissonRagged_Abundance.R")
#print model
print.noquote(readLines("Bayesian//NmixturePoissonRagged_Abundance.R"))
#for parallel run
Yobs=indat$Yobs
Bird=indat$jBird
Plant=indat$jPlant
Time=indat$jID
Times=max(indat$jID)
Traitmatch=jTraitmatch
Birds=max(indat$jBird)
Plants=max(indat$jPlant)
Nobs=length(indat$Yobs)
resources=resourcemat
#A blank Y matrix - all present
Ninit<-array(dim=c(Birds,Plants,Times),data=max(indat$Yobs)+1)
#Inits
InitStage <- function() {list(beta1=rep(0,Birds),alpha=rep(0,Birds),alpha_mu=0,N=Ninit,beta1_mu=0)}
#Parameters to track
ParsStage <- c("detect","alpha","beta1","alpha_mu","beta1_mu","fit","fitnew","ynew","E")
#MCMC options
ni <- runs  # number of draws from the posterior
nt <- 16   #thinning rate
nb <- max(0,runs-4000) # number to discard for burn-in
nc <- 2  # number of chains
Dat<-list("Yobs","Bird","Plant","Plants","Traitmatch","Birds","Nobs","Ninit","Time","Times","resources","nc","nb","ni","nt")
system.time(abundance<-jags.parallel(Dat,InitStage,parameters.to.save=ParsStage,model.file="Bayesian/NmixturePoissonRagged_Abundance.jags",n.thin=nt, n.iter=ni,n.burnin=nb,n.chains=nc))
runs<-100
#Source model
source("Bayesian/NmixturePoissonRagged.R")
#print model
print.noquote(readLines("Bayesian//NmixturePoissonRagged.R"))
#for parallel run
Yobs=indat$Yobs
Bird=indat$jBird
Plant=indat$jPlant
Time=indat$jID
Times=max(indat$jID)
Traitmatch=jTraitmatch
Birds=max(indat$jBird)
Plants=max(indat$jPlant)
Nobs=length(indat$Yobs)
#A blank Y matrix - all present
Ninit<-array(dim=c(Birds,Plants,Times),data=max(indat$Yobs)+1)
#Inits
InitStage <- function() {list(beta1=rep(0,Birds),alpha=rep(0,Birds),N=Ninit,beta1_mu=0)}
#Parameters to track
ParsStage <- c("detect","alpha","beta1","alpha_mu","beta1_sigma","beta1_mu","ynew","fit","fitnew","E")
#MCMC options
ni <- runs  # number of draws from the posterior
nt <- 16   #thinning rate
nb <- max(0,runs-4000) # number to discard for burn-in
nc <- 2  # number of chains
Dat<-list("Yobs","Bird","Plant","Plants","Traitmatch","Birds","Nobs","Ninit","Time","Times","nb","nc","ni","nt")
system.time(traits<-jags.parallel(Dat,InitStage,ParsStage,model.file="Bayesian/NmixturePoissonRagged.jags",n.thin=nt, n.iter=ni,n.burnin=nb,n.chains=nc))
pars_detect_traits<-extract_par(traits,data=indat,Bird="jBird",Plant="jPlant")
rm(traits)
gc()
#name
pars_detect_traits$Model<-"N-mixture"
pars_abundance<-extract_par(abundance,data=indat,Bird="jBird",Plant="jPlant")
rm(abundance)
gc()
#name
pars_abundance$Model<-"Abundance"
par_at<-list(Abundance=pars_abundance %>% filter(par=="E"),trait=pars_detect_traits %>% filter(par=="E"))
par_at<-melt(par_at,id.vars=colnames(pars_abundance))
dmat<-par_at %>% group_by(species,L1) %>% summarize(E=mean(estimate))
dmat<-merge(dmat,jagsIndexBird,by.x="species",by.y="jBird")
ggplot(dmat,aes(x=Hummingbird,y=E,col=L1)) + geom_point(size=4)
head(par_at)
sp_pl[i,][,"Yobs"]<-data[as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2]),"Yobs"]
sp_pl[i,][,"Yobs"]
sp_pl$Yobs<-NA
sp_pl[i,][,"Yobs"]<-data[as.numeric(str_match(sp_pl[i,][,"parameter"],pattern="\\[(\\d+)]")[,2]),"Yobs"]
source('~/Occupy/Bayesian/BayesFunctions.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(par_at)
ggplot(aes(x=Yobs,y=estimate)) + geom_violin()
ggplot(data=par_at,aes(x=Yobs,y=estimate)) + geom_violin()
ggplot(data=par_at,aes(x=as.factor(Yobs),y=estimate)) + geom_violin()
dmat<-par_at %>% group_by(Yobs,L1) %>% summarize(E=mean(estimate))
ggplot(data=par_at,aes(x=as.factor(Yobs),y=estimate)) + geom_violin()
ggplot(data=dmat,aes(x=as.factor(Yobs),y=estimate)) + geom_violin()
ggplot(data=dmat,aes(x=as.factor(Yobs),y=E)) + geom_violin()
ggplot(data=dmat,aes(x=as.factor(Yobs),y=E)) + geom_point()
ggplot(data=dmat,aes(x=as.factor(Yobs),y=E)) + geom_line()
ggplot(data=dmat,aes(x=as.factor(Yobs),y=E)) + geom_line(aes(col=L1))
ggplot(data=dmat,aes(x=as.factor(Yobs),y=E)) + geom_line(aes(col=L1,group=1))
ggplot(data=dmat,aes(x=as.factor(Yobs),y=E)) + geom_line(aes(col=L1,group=L1))
par_at<-list(Abundance=pars_abundance %>% filter(par %in% c("fit","fitnew")),trait=pars_detect_traits %>% filter(par %in% c("fit","fitnew"))
par_at<-list(Abundance=pars_abundance %>% filter(par %in% c("fit","fitnew")),trait=pars_detect_traits %>% filter(par %in% c("fit","fitnew")))
par_at<-melt(par_at,id.vars=colnames(pars_abundance))
fitstat<-dcast(par_at,Model+Draw+Chain~par,value.var="estimate")
head(fitstat)
ymin<-round(min(fitstat$fit))
ymax<-round(max(fitstat$fit))
ab<-data.frame(x=0:ymax,y=0:ymax)
disc_obs<-ggplot(fitstat,aes(x=fit,y=fitnew)) + geom_point(aes(col=Model)) + theme_bw() + labs(x="Discrepancy of observed data",y="Discrepancy of replicated data",col="Model")  + ggtitle("Empirical Data") + geom_line(data=ab,aes(x=x,y=y)) + coord_fixed() + ylim(ymin=0,ymax=max(max(c(fitstat$fit,fitstat$fitnew)))) + xlim(xmin=0,xmax=max(max(c(fitstat$fit,fitstat$fitnew))))
disc_obs
?gzfile
write.csv(m2_niave,"OutData/GLMM.csv")
4000/16
1000/5
