{
    "contents" : "#extract and create a dataframe of posteriors\n\nextract_par<-function(x,data=obs,Bird=\"Bird\",Plant=\"Plant\"){\n  #extract desired info from the models\n  n<-dim(x$BUGSoutput$sims.array)[1]\n  parsO<-melt(x$BUGSoutput$sims.array[max(0,(n-500)):n,,])\n  colnames(parsO)<-c(\"Draw\",\"Chain\",\"parameter\",\"estimate\")\n  gc()\n  #label species and plants\n  l<-levels(parsO$parameter)\n  \n  #parameters to save\n  totrack<-x$parameters.to.save\n  \n  #assign species index to ragged frame.\n  sp_pl<-data.frame(parameter=l,species=as.numeric(str_match(l,pattern=\"\\\\[(\\\\d+)]\")[,2]),par=str_extract(l,\"\\\\w+\"))\n  \n  #correct N samples\n  i<-sp_pl$par %in% \"ynew\"\n  \n  #Species\n  sp_pl[i,][,\"species\"]<-data[as.numeric(str_match(sp_pl[i,][,\"parameter\"],pattern=\"\\\\[(\\\\d+)]\")[,2]),Bird]\n  \n  \n  #Plant\n  #add a NA plant columns\n  sp_pl$plant<-NA\n  sp_pl[i,][,\"plant\"]<-\n    data[as.numeric(str_match(sp_pl[i,][,\"parameter\"],pattern=\"\\\\[(\\\\d+)]\")[,2]),Plant]\n  \n  #merge levels, can be very large, do in pieces. \n  parsO<-inner_join(parsO,sp_pl) %>% filter(!par == \"deviance\")\n  return(parsO)\n}\n#fits a curve for given poisson function\n\ntrajF<-function(alpha,beta,x){\n  fdat<-data.frame(alpha=alpha,beta=beta)\n  \n  #fit regression for each input estimate\n  sampletraj<-list()\n  for (s in 1:nrow(fdat)){\n    a<-fdat$alpha[s]\n    b<-fdat$beta[s]\n    b2<-fdat$beta2[s]\n    yp=exp(a + (b*x))\n    \n    #compute pred value\n    sampletraj[[s]]<-data.frame(x=x,y=yp)\n  }\n  \n  sample_all<-rbind_all(sampletraj)\n  \n  #Compute CI intervals\n  predy<-group_by(sample_all,x) %>% summarise(lower=quantile(y,0.025,na.rm=T),upper=quantile(y,0.975,na.rm=T),mean=mean(y,na.rm=T))\n  return(predy)\n}\n\ntrajHDI<-function(alpha,beta,x){\n  fdat<-data.frame(alpha=alpha,beta=beta)\n  \n  #fit regression for each input estimate\n  sampletraj<-list()\n  for (s in 1:nrow(fdat)){\n    a<-fdat$alpha[s]\n    b<-fdat$beta[s]\n    b2<-fdat$beta2[s]\n    yp=exp(a + (b*x))\n    \n    #compute pred value\n    sampletraj[[s]]<-data.frame(x=x,y=yp)\n  }\n  \n  sample_all<-rbind_all(sampletraj)\n  \n  #Compute CI intervals\n  predy<-group_by(sample_all,x) %>% summarise(lower=hdi(y)[[1]],upper=hdi(y)[[2]],mean=mean(y,na.rm=T))\n  return(predy)\n}\n\n\ntrajState<-function(alpha,beta,x,observed){\n  \n  #Bind together\n  fdat<-data.frame(alpha=alpha,beta=beta)\n  \n  #fit regression for each input estimate\n  sampletraj<-list()\n  for (s in 1:nrow(fdat)){\n    a<-fdat$alpha[s]\n    b<-fdat$beta[s]\n    yp=exp(a + (b*x$value))\n    \n    #compute pred value\n    state<-data.frame(x,State=rpois(length(yp),yp))\n    \n    #merge with observed state\n    mstate<-merge(state,observed,by=c(\"Bird\",\"Plant\"))\n    \n    #Compute chisquared\n    csq<-sum((mstate$Y-mstate$State)^2/(mstate$State+0.5))\n    \n    sampletraj[[s]]<-csq\n  }\n  \n  #return as a vector\n  return(unlist(sampletraj))\n}\n",
    "created" : 1460133268429.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4157473937",
    "id" : "DAE05E92",
    "lastKnownWriteTime" : 1460135051,
    "path" : "~/Occupy/Functions.R",
    "project_path" : "Functions.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}