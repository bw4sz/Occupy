{
    "contents" : "##########################\n#Hummingbird Transect Data\n##########################\n\n#Data Collected by Holger Beck,K. Lohman and B. Weinstein\n#R script Ben Weinstein - Stony Brook University 7/7/2013\n#Under Git repository - Maquipucuna\n\n#Read in required libraries\nrequire(ggplot2)\nrequire(reshape2)\nrequire(maptools)\nrequire(dplyr)\nrequire(plotKML)\nrequire(reshape)\nrequire(chron)\nlibrary(taxize)\nlibrary(stringr)\n#Set DropBox Working Directory\nsetwd(\"C:/Users/Ben/Dropbox/\")\n\n#Read in workspace if desired for quick access\n#load(\"Thesis/Maquipucuna_SantaLucia/Results/HummingbirdTransect.Rdata\")\n\n#For the sake of simplicity, make everything lowercase\n.simpleCap <- function(x) {\n  s <- strsplit(x, \" \")[[1]]\n  paste(toupper(substring(s, 1,1)), substring(s, 2),\n        sep=\"\", collapse=\" \")\n}\n\n#Read in Ben's transect data\nHum<-read.csv(\"Thesis/Maquipucuna_SantaLucia/Data2013/csv/HummingbirdTransect.csv\")\n\n#Transect IDs from Summer 2013 data\nTID<-read.csv(\"Thesis/Maquipucuna_SantaLucia/Data2013/csv/TransectIID.csv\")\n\n#Bring in holger's hummingbird datasheet.\nholger.hum<-read.csv(\"Thesis/Maquipucuna_SantaLucia/Data2013/csv/HolgerTransect_Hummingbirds.csv\")\n\n#Bring in holger transect data\nholgerID<-read.csv(\"Thesis/Maquipucuna_SantaLucia/Data2013/csv/TransectIIDHolger.csv\")\n\n#Fix holger's ID elev columns, make them more general, transect delim\nfor (x in 1:6){\n  holgerID[holgerID$Transect %in% x,\"Elevation.Begin\"]<-1100 + 200*x \n  holgerID[holgerID$Transect %in% x,\"Elevation.End\"]<-1300 + 200*x\n}\n\n####################################\n#Clean Holger's data, begins in 9/2013\n###################################\nholgerID$Transect_R<-factor(paste(holgerID$Elevation.Begin,holgerID$Elevation.End,sep=\"_\"))\n\n#Format dates\nholgerID$Date_F<-sapply(holgerID$Date,function(x){\n  #grab the year\n  d<-strsplit(as.character(x),split=\"/\")[[1]]\n  yr<-d[[3]]\n  #get the last two characters\n  yrsplit<-substr(yr, nchar(yr)-2+1, nchar(yr))\n  dat_f<-as.Date(paste(paste(d[[1]],d[[2]],sep=\"/\"),yrsplit,sep=\"/\"),format=\"%d/%m/%y\")\n  return(as.character(dat_f))\n})\n\nholger.hum$Date_F<-sapply(holger.hum$Date,function(x){\n  #grab the year\n  d<-strsplit(as.character(x),split=\"/\")[[1]]\n  yr<-d[[3]]\n  #get the last two characters\n  yrsplit<-substr(yr, nchar(yr)-2+1, nchar(yr))\n  dat_f<-as.Date(paste(paste(d[[1]],d[[2]],sep=\"/\"),yrsplit,sep=\"/\"),format=\"%d/%m/%y\")\n  return(as.character(dat_f))\n})\n\n#Create Month Columns\nholgerID$Month<-as.numeric(format(as.Date(holgerID$Date_F),\"%m\"))\n\n#Create ID columns\nholgerID$ID<-factor(paste(holgerID$Transect,holgerID$Date_F,sep=\"_\"))\nholger.hum$ID<-factor(paste(holger.hum$Transect,holger.hum$Date_F,sep=\"_\"))\n\n#How many dates are missing?\ndim(holger.hum)\ndim(holgerID)\n\nholger.full<-merge(holger.hum,holgerID,by=c(\"ID\",\"Date_F\"))\ndim(holger.full)\n\n#Needs a year column\nholger.full$Year<-years(holger.full$Date_F)\n#legacy change, keep all observations\nholgerInter<-holger.full\n\n################\n#Flower Taxonomy\n################\n\n#Go through a series of data cleaning steps, at the end remove all rows that are undesired\nFamilies<-levels(factor(holgerInter$Family))\ntax<-gnr_resolve(names = Families, splitby=30,best_match_only =T,canonical  = T)\n\n#Set the Family column\nfor (x in 1:nrow(holgerInter)){\n  y<-holgerInter[x,]\n  toMatch<-y$Family\n  if(!toMatch %in% tax$submitted_name){next} else{\n    holgerInter[x,\"Iplant_Family\"]<-tax[tax$submitted_name %in% toMatch,\"matched_name2\"]\n  }}\n\n#Known id error:\nholgerInter$Genus<-as.character(holgerInter$Genus)\nholgerInter$Species<-as.character(holgerInter$Species)\n\nholgerInter$Genus[holgerInter$Genus %in%  \"Hepiella\"]<-\"Glossoloma\" \nholgerInter$Species[holgerInter$Species %in%  \"ulmifolia\"]<-\"oblongicalyx\" \n\n#Repeat for species double\nSpecies<-levels(factor(paste(holgerInter$Genus,holgerInter$Species,sep=\" \")))\ntax<-gnr_resolve(names = Species, splitby=30,best_match_only = T,canonical = T)\n\n#Set the Species column\nfor (x in 1:nrow(holgerInter)){\n  y<-holgerInter[x,]\n  toMatch<-factor(paste(y$Genus,y$Species,sep=\" \"))\n  if(!toMatch %in% tax$submitted_name){next} else{\n    holgerInter[x,\"Iplant_Double\"]<-tax[tax$submitted_name %in% toMatch,\"matched_name2\"]\n  }}\n\n#replace any missing names.\ntoinsert<-holgerInter[is.na(holgerInter$Iplant_Double),]\ntoin <- gsub(\" $\",\"\", paste(toinsert$Genus,toinsert$Species), perl=T)\nholgerInter[is.na(holgerInter$Iplant_Double), \"Iplant_Double\"]<-toin\n\n#get the desired columns\nholgerInter<-holgerInter[,colnames(holgerInter) %in% c(\"ID\",\"Hummingbird.Species\",\"Iplant_Double\",\"Way.Point\",\"Month\",\"Date_F\",\"Transect_R\",\"Transect\",\"Year\")]\n\n#########################\n####Add GPS information\n#########################\n\n##Repeat for first gps\ng<-list.files(\"Holger\\\\Transect_Protocol_Holger\\\\WayPoints\",full.names=TRUE,pattern=\".gpx\",recursive=TRUE)\n\n#loop through input files and find the errors. \ngpx2<-list()\nfor (x in 1:length(g)){\n  try(\n    gpx2[[x]]<-readGPX(g[x],waypoints=TRUE)$waypoints)\n}\n\n#Bind into one dataframe\ngpx.dat<-rbind_all(gpx2[sapply(gpx2,class)==\"data.frame\"])\ngpx.dat$name<-as.character(gpx.dat$name)\n\n#create  spatial object\ngps<-SpatialPointsDataFrame(coords=cbind(gpx.dat$lon,gpx.dat$lat),as.data.frame(gpx.dat))\n\n#Create month ID column in the GPS data\ngps$MonthID<-sapply(gps$time,function(x){\n  b<-strsplit(as.character(x),\"T\")[[1]][1]\n  if(is.na(b)){\n    return(\"S\")\n  }\n  return(as.numeric(format(as.POSIXlt(b),\"%m\")))\n})\n\n#Date column\n#Create month ID column in the GPS data\ngps$Date_F<-sapply(gps$time,function(x){\n  b<-strsplit(as.character(x),\"T\")[[1]][1]\n  if(is.na(b)){\n    return(\"S\")\n  }\n  return(format(as.POSIXlt(b),\"%Y-%m-%d\"))\n})\n\n#Round to the nearest 10m \ngps$ele<-round(as.numeric(as.character(gps$ele)),-1)\n\n#remove weird place holger from values below 100\ngps$GPS.ID<-sapply(gps$name,function(x){\n  a<-as.numeric(as.character(x))\n  if(is.na(a)){\n    return(x)\n  }\n  if(is.numeric(a)){\n    return(a)\n  }\n})\n\ngps$Year<-years(gps$Date_F)\n\n#remove literally identical rows\ngps<-gps[!duplicated(gps@data),]\n\n#############################\n#Merge GPS info with transects\n#############################\n\n#Merge all that fit the month year and ID\nHMatch<-merge(holgerInter,gps,by.x=c(\"Way.Point\",\"Month\",\"Year\"),by.y=c(\"GPS.ID\",\"MonthID\",\"Year\"),all.x=T)\n\n#just want the date from the input data.\nHMatch<-HMatch[,!colnames(HMatch) %in% \"Date_F.y\"]\ncolnames(HMatch)[colnames(HMatch) %in% \"Date_F.x\"]<-\"Date_F\"\n\nnrow(HMatch[is.na(HMatch$ele),])\nmissingGPS<-HMatch[is.na(HMatch$ele),]$Way.Point\n\n#For missing data, take the mean of the transect?\n#For any data still missing gps, take the mean of the transect\nfor (x in missingGPS){\n  tr<-HMatch[HMatch$Way.Point %in% x,\"Transect_R\"]\n  el<-mean(as.numeric(strsplit(as.character(tr),split=\"_\")[[1]]))\n  HMatch[HMatch$Way.Point %in% x,\"ele\"]<-el\n}\n\nqplot(HMatch$ele,\"point\")\n\n#create shapefile\nwrite.csv(HMatch,\"Thesis/Maquipucuna_SantaLucia/Results/HummingbirdTransects/HolgerHummingbirdTransectsCleaned.csv\")\n\n#################################\n#Clean Summer 2013 Data\n#################################\n\n#add in summer transect data\nhead(Hum)\n\n#fix the unknown uppercase\nlevels(Hum$Hummingbird.Species)[levels(Hum$Hummingbird.Species) %in% \"UkWN\"]<-toupper(levels(Hum$Hummingbird.Species)[levels(Hum$Hummingbird.Species) %in% \"UkWN\"])\n\n#Create identical structure to holgers data, we need a data and month column\n# Fix the caps at the plant species\ntable(Hum$Plant.Species)\nlevels(Hum$Plant.Species)[levels(Hum$Plant.Species) %in% \"\"]<-NA\ntable(Hum$Plant.Species)\n\n#Select the Bird transects\nTID.f<-TID[TID$Type %in% \"Hummingbird\",]\nTID$TransectID<-as.factor(TID$TransectID)\nHum$ID\nhum.id<-merge(Hum,TID.f,by.x=\"ID\",by.y=\"TransectID\")\n\n#Create date column\nhum.id$Date_F<-as.Date(as.character(hum.id$Date),\"%m/%d/%Y\")\nhum.id$Month<-as.numeric(format(as.Date(hum.id$Date_F),\"%m\"))\nhum.id$Transect_R<-paste(hum.id$Elevation.Begin,hum.id$Elevation.End,sep=\"_\")\n\n############################\n###Taxonomoy of plant names\n############################\n\n#Repeat for genus\nplants<-levels(factor(hum.id$Plant.Species))\n#Go through a series of data cleaning steps, at the end remove all rows that are undesired\n\nFamilies<-levels(factor(plants))\ntax<-gnr_resolve(names = Families, splitby=30,best_match_only = T,canonical = T)\n\n#Set the Family column\nfor (x in 1:nrow(hum.id)){\n  y<-hum.id[x,]\n  toMatch<-y$Plant.Species\n  if(!toMatch %in% tax$submitted_name){next} else{\n    hum.id[x,\"Iplant_Double\"]<-tax[tax$submitted_name %in% toMatch,\"matched_name2\"]\n  }}\n\n###########################\n#Attach GPS information\n########################\n\nformerGPS<-read.csv(\"Thesis/Maquipucuna_SantaLucia/Data2013/GPS/Ben2013SummerGPS.txt\",header=TRUE)\n\n#remove weird place holger from values below 100\nformerGPS$GPS.ID<-sapply(as.character(formerGPS$ident),function(x){\n  a<-as.numeric(x)\n  if(is.na(a)){\n    return(x)\n  }\n  if(!is.na(a)){\n    return(a)\n  }\n})\n\n#Merge all that fit the month and ID?\nBMatch<-merge(hum.id,formerGPS,\"GPS.ID\",all.x=TRUE,all.y=FALSE)\n\ndim(BMatch)\ndim(hum.id)\n\n#how many are missing?\nnrow(BMatch[is.na(BMatch$altitude),])\n\nmissingGPS<-BMatch[is.na(BMatch$altitude),]$GPS.ID\n\n#For missing data, take the mean of the transect?\n#For any data still missing gps, take the mean of the transect\nfor (x in missingGPS){\n  tr<-BMatch[BMatch$GPS.ID %in% x,\"Transect_R\"]\n  el<-mean(as.numeric(strsplit(as.character(tr),split=\"_\")[[1]]))\n  BMatch[BMatch$GPS.ID %in% x,\"altitude\"]<-el\n}\n\n#round to the nearest 10m\nBMatch$altitude<-round(BMatch$altitude,-1)\nqplot(BMatch$altitude,\"point\")\n\n##############################\n#Combine transect Rows\n##############################\nhead(BMatch)\nhead(HMatch)\n\nBrows<-BMatch[,colnames(BMatch) %in% c(\"GPS.ID\",\"Iplant_Double\",\"Hummingbird.Species\",\"Month\",\"Date_F\",\"Transect_R\",\"ID\",\"altitude\",\"lat\",\"long\")]\n\ncolnames(HMatch)\nHrows<-HMatch[,colnames(HMatch) %in% c(\"Way.Point\" ,\"Iplant_Double\",\"Hummingbird.Species\",\"Month\",\"Date_F\",\"Transect_R\",\"ID\",\"ele\",\"lat\",\"lon\")]\n\ncolnames(Hrows)\ncolnames(Brows)[colnames(Brows) %in% c(\"altitude\",\"long\")]<-c(\"lon\",\"ele\")\ncolnames(Hrows)[colnames(Hrows) %in% c(\"Way.Point\",\"Date_F.y\")]<-c(\"GPS.ID\",\"Date_F\")\n\nHrows$Date_F<-as.Date(Hrows$Date_F)\nBrows$ID<-as.character(Brows$ID)\n\ntransectRows<-rbind_all(list(Brows,Hrows))\n\n#error on dateF for a handful of rows.\nresplit<-transectRows$ID[is.na(transectRows$Date_F)]\nredate<-sapply(resplit,function(x){\n  str_split(x,\"_\")[[1]][[2]]\n  })\n\ntransectRows$Date_F[is.na(transectRows$Date_F)]<-redate\n\nwrite.csv(transectRows,\"Thesis/Maquipucuna_SantaLucia/Results/HummingbirdTransects/HumTransectRows.csv\")\n\n#Return end of file\nprint(\"HummingbirdTransects\")\n\nsave.image(\"Thesis/Maquipucuna_SantaLucia/Results/HummingbirdTransect.Rdata\")\n\n",
    "created" : 1460559897777.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2115036811",
    "id" : "C82FD8DE",
    "lastKnownWriteTime" : 1453241712,
    "path" : "~/Maquipicuna/HummingbirdTransect.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}